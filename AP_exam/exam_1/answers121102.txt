1

def power(a,b) {
   if b = 0 return 1
   if b = 1 return a
   x <- power(a,b//2)   # // represents integer division
   if b is even return x*x
   else return x*x*a
}


2
Build Huffman tree
b) Codes become: A -> 0, C -> 100, G -> 101, T -> 11

a) Encoding of string is 100100...110
consisting of 140 bits


3
a)

def computeP(n,m) {
   declare table[0..n,0..m]
   for i <- 1..n table[i,0] <- 0
   for j <- 1..m table[0,j] <- 1
   for i <- 1..n
      for j <- 1..m
         table[i,j] <- (table[i-1,j]+ table[i,j-1])/2
   return table[n,m]
}

b) O(n*m) because of double for loop

c) P(2,3) = 11/16


4

def kernel(G) {
   minlabel <- infinity
   for every node v in V(G) {
      T <- BFS-tree(G,v)
      traverse T to find farthest node u from v
      v.label <- distance from v to u
      minlabel <- min{v.label, minlabel}
   }
   declare set S <- {}
   for every node v in V(G) {
      if v.label = minlabel S.insert(v)
   }
   return S
}

BFS can be replaced with precomputation of all-pairs shortest path with Warshall's algorithm (dynamic programming), takes O(n^3) time.


5

Let S be the set of points

def 2ndClosestPair(S) {
   (p,q) <- closestPair(S)
   X <- S-{p}
   (p',q') <- closestPair(X)
   Y <- S-{q}
   (p'',q'') <- closestPair(Y)
   if |p',q'| < |p'',q''| return (p',q')
   else return (p'',q'')
}

Takes O(n log n) time since we make 3 calls to closestPair and remaining operations take at most linear time.
